import { a as createComponent, b as renderTemplate } from './astro/server_DwmPXTEX.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$ParticlesBackground = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["<script>\n  // Este script ser\xE1 executado no cliente ap\xF3s o carregamento do DOM\n  document.addEventListener('DOMContentLoaded', async function () {\n    // Procura por todos os elementos com a classe counter-particles\n    const particlesContainers = document.querySelectorAll('.counter-particles');\n\n    if (particlesContainers.length > 0 && typeof tsParticles !== 'undefined') {\n      // Para cada container, inicializa as part\xEDculas\n      particlesContainers.forEach((container, index) => {\n        // Garante que cada container tenha um ID \xFAnico para o tsParticles\n        const containerId = container.id || `particles-container-${index}`;\n        if (!container.id) {\n          container.id = containerId;\n        }\n\n        // Importante: Limita o contexto da anima\xE7\xE3o apenas ao container atual\n        // Isso impede que as part\xEDculas sejam renderizadas fora do elemento\n        container.style.position = container.style.position || 'absolute';\n        container.style.overflow = container.style.overflow || 'hidden';\n\n        try {\n          // Inicializa as part\xEDculas para este container espec\xEDfico\n          tsParticles.load(containerId, {\n            particles: {\n              number: {\n                value: 80,\n                density: {\n                  enable: true,\n                  value_area: 800,\n                },\n              },\n              color: {\n                value: '#c9a874',\n              },\n              shape: {\n                type: 'circle',\n              },\n              opacity: {\n                value: 0.1,\n                random: true,\n              },\n              size: {\n                value: 5,\n                random: true,\n              },\n              line_linked: {\n                enable: true,\n                distance: 150,\n                color: '#c9a874',\n                opacity: 0.05,\n                width: 1,\n              },\n              move: {\n                enable: true,\n                speed: 2,\n                direction: 'none',\n                random: true,\n                straight: false,\n                out_mode: 'out',\n                bounce: false,\n              },\n            },\n            interactivity: {\n              detect_on: 'canvas',\n              events: {\n                onhover: {\n                  enable: true,\n                  mode: 'grab',\n                },\n                onclick: {\n                  enable: true,\n                  mode: 'push',\n                },\n                resize: true,\n              },\n            },\n            retina_detect: true,\n            // Importante: Restringir as part\xEDculas ao container\n            fullScreen: {\n              enable: false,\n            },\n          });\n          console.log(`tsParticles inicializado com sucesso para ${containerId}`);\n        } catch (error) {\n          console.error(`Erro ao inicializar tsParticles para ${containerId}:`, error);\n          createFallbackParticles(container);\n        }\n      });\n    } else if (particlesContainers.length > 0) {\n      console.warn('tsParticles n\xE3o est\xE1 dispon\xEDvel. Criando part\xEDculas alternativas.');\n      particlesContainers.forEach((container) => {\n        createFallbackParticles(container);\n      });\n    }\n  });\n\n  // Fun\xE7\xE3o para criar part\xEDculas simples como fallback\n  function createFallbackParticles(container) {\n    if (container) {\n      // Garante que o container tenha posi\xE7\xE3o relativa para posicionar as part\xEDculas\n      container.style.position = container.style.position || 'relative';\n\n      // Adiciona 30 divs de part\xEDculas como fallback\n      for (let i = 0; i < 30; i++) {\n        const particle = document.createElement('div');\n        particle.className = 'fallback-particle';\n        particle.style.position = 'absolute';\n        particle.style.width = Math.random() * 5 + 2 + 'px';\n        particle.style.height = Math.random() * 5 + 2 + 'px';\n        particle.style.backgroundColor = '#c9a874';\n        particle.style.opacity = (Math.random() * 0.15).toString();\n        particle.style.left = Math.random() * 100 + '%';\n        particle.style.top = Math.random() * 100 + '%';\n        particle.style.borderRadius = '50%';\n        container.appendChild(particle);\n      }\n    }\n  }\n<\/script>"], ["<script>\n  // Este script ser\xE1 executado no cliente ap\xF3s o carregamento do DOM\n  document.addEventListener('DOMContentLoaded', async function () {\n    // Procura por todos os elementos com a classe counter-particles\n    const particlesContainers = document.querySelectorAll('.counter-particles');\n\n    if (particlesContainers.length > 0 && typeof tsParticles !== 'undefined') {\n      // Para cada container, inicializa as part\xEDculas\n      particlesContainers.forEach((container, index) => {\n        // Garante que cada container tenha um ID \xFAnico para o tsParticles\n        const containerId = container.id || \\`particles-container-\\${index}\\`;\n        if (!container.id) {\n          container.id = containerId;\n        }\n\n        // Importante: Limita o contexto da anima\xE7\xE3o apenas ao container atual\n        // Isso impede que as part\xEDculas sejam renderizadas fora do elemento\n        container.style.position = container.style.position || 'absolute';\n        container.style.overflow = container.style.overflow || 'hidden';\n\n        try {\n          // Inicializa as part\xEDculas para este container espec\xEDfico\n          tsParticles.load(containerId, {\n            particles: {\n              number: {\n                value: 80,\n                density: {\n                  enable: true,\n                  value_area: 800,\n                },\n              },\n              color: {\n                value: '#c9a874',\n              },\n              shape: {\n                type: 'circle',\n              },\n              opacity: {\n                value: 0.1,\n                random: true,\n              },\n              size: {\n                value: 5,\n                random: true,\n              },\n              line_linked: {\n                enable: true,\n                distance: 150,\n                color: '#c9a874',\n                opacity: 0.05,\n                width: 1,\n              },\n              move: {\n                enable: true,\n                speed: 2,\n                direction: 'none',\n                random: true,\n                straight: false,\n                out_mode: 'out',\n                bounce: false,\n              },\n            },\n            interactivity: {\n              detect_on: 'canvas',\n              events: {\n                onhover: {\n                  enable: true,\n                  mode: 'grab',\n                },\n                onclick: {\n                  enable: true,\n                  mode: 'push',\n                },\n                resize: true,\n              },\n            },\n            retina_detect: true,\n            // Importante: Restringir as part\xEDculas ao container\n            fullScreen: {\n              enable: false,\n            },\n          });\n          console.log(\\`tsParticles inicializado com sucesso para \\${containerId}\\`);\n        } catch (error) {\n          console.error(\\`Erro ao inicializar tsParticles para \\${containerId}:\\`, error);\n          createFallbackParticles(container);\n        }\n      });\n    } else if (particlesContainers.length > 0) {\n      console.warn('tsParticles n\xE3o est\xE1 dispon\xEDvel. Criando part\xEDculas alternativas.');\n      particlesContainers.forEach((container) => {\n        createFallbackParticles(container);\n      });\n    }\n  });\n\n  // Fun\xE7\xE3o para criar part\xEDculas simples como fallback\n  function createFallbackParticles(container) {\n    if (container) {\n      // Garante que o container tenha posi\xE7\xE3o relativa para posicionar as part\xEDculas\n      container.style.position = container.style.position || 'relative';\n\n      // Adiciona 30 divs de part\xEDculas como fallback\n      for (let i = 0; i < 30; i++) {\n        const particle = document.createElement('div');\n        particle.className = 'fallback-particle';\n        particle.style.position = 'absolute';\n        particle.style.width = Math.random() * 5 + 2 + 'px';\n        particle.style.height = Math.random() * 5 + 2 + 'px';\n        particle.style.backgroundColor = '#c9a874';\n        particle.style.opacity = (Math.random() * 0.15).toString();\n        particle.style.left = Math.random() * 100 + '%';\n        particle.style.top = Math.random() * 100 + '%';\n        particle.style.borderRadius = '50%';\n        container.appendChild(particle);\n      }\n    }\n  }\n<\/script>"])));
}, "/home/zayit/projetos/lumino/apps/frontend/src/components/animations/ParticlesBackground.astro", void 0);

export { $$ParticlesBackground as $ };
